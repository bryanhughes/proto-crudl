%%%-------------------------------------------------------------------
%%% @author bryan
%%% @copyright (C) 2021, <COMPANY>
%%% @doc
%%%

%%    CREATE SCHEMA IF NOT EXISTS test_schema;
%%
%%    CREATE  TABLE test_schema."user" (
%%    user_id              bigint  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
%%    first_name           varchar(100)   ,
%%    last_name            varchar(100)   ,
%%    email                varchar  NOT NULL ,
%%    geog                 geography(point)   ,
%%    pword_hash           bytea   ,
%%    user_token           uuid DEFAULT uuid_generate_v1() NOT NULL ,
%%    enabled              boolean DEFAULT true NOT NULL ,
%%    aka_id               bigint   ,
%%    my_array             integer[]  NOT NULL ,
%%    user_type            varchar  NOT NULL ,
%%    number_value         integer  NOT NULL ,
%%    created_on           timestamp DEFAULT current_timestamp NOT NULL ,
%%    updated_on           timestamp   ,
%%    due_date             date   ,
%%    user_state           varchar   ,
%%    user_state_type      boolean DEFAULT true  ,
%%    CONSTRAINT lookup_email UNIQUE ( email ) ,
%%    CONSTRAINT pk_user PRIMARY KEY ( user_id )
%%    );

%%% @end
%%% Created : 13. Oct 2021 4:45 PM
%%%-------------------------------------------------------------------
-module(bug).
-author("bryan").

%% API
-export([]).

-define(LIST_BY_USER_TYPE_ENABLED, "SELECT user_id, first_name, last_name, email, user_token, enabled, aka_id, my_array, user_type, number_value, created_on, updated_on, due_date, user_state, user_state_type, version, ST_Y(geog::geometry) AS lat, ST_X(geog::geometry) AS lon FROM test_schema.user WHERE enabled = $1 AND user_type = $2 LIMIT $3 OFFSET $4").

-export([]).

list_by_user_type_enabled(Enabled, UserType, Limit, Offset) ->
    Params = [Enabled, UserType, Limit, Offset],
    io:format("Query =~p\n", [?LIST_BY_USER_TYPE_ENABLED]),
    io:format("Params=~p\n", [Params]),
    case pgo:query(?LIST_BY_USER_TYPE_ENABLED, Params, #{decode_opts => [{return_rows_as_maps, true}, {column_name_as_atom, true}]}) of
        #{command := select, num_rows := NRows, rows := Rows} ->
            {ok, NRows, Rows};
        {error, Reason} ->
            {error, Reason}
    end.

%%
%% Tests
%%
-ifdef(TEST).
-include_lib("eunit/include/eunit.hrl").
-include_lib("kernel/include/logger.hrl").

%% Make sure you have run reset_db.sh with the test/test_data.sql seed file

first_test() ->
    application:ensure_all_started(logger),
    logger:set_primary_config(level, info),
    application:ensure_all_started(pgo),
    ?LOG_INFO("====================== first_test() Starting Database ======================"),
    application:set_env(pg_types, uuid_format, string),
    pgo:start_pool(default, #{pool_size => 10,
                              host => "127.0.0.1",
                              database => "proto_crudl",
                              user => "proto_crudl",
                              password => "proto_crudl"}),
    ok.


bug_test() ->
    ?LOG_INFO("====================== bug_test() START ======================"),
    DeleteSql = "DELETE FROM test_schema.user",
    case pgo:query(DeleteSql, []) of
        #{command := delete} ->
            ok;
        {error, Reason1} ->
            erlang:error(Reason1)
    end,

    InsertSql1 = "INSERT INTO test_schema.user (user_type, first_name, last_name, email, my_array, number_value) VALUES ('BIG SHOT', 'John', 'Doe', 'john@doe.com', '{}', 2)",
    case pgo:query(InsertSql1, []) of
        #{command := insert} ->
            ok;
        {error, Reason2} ->
            erlang:error(Reason2)
    end,

    InsertSql2 = "INSERT INTO test_schema.user (user_type, first_name, last_name, email, my_array, number_value) VALUES ('BIG SHOT', 'Jane', 'Doe', 'jane@doe.com', '{}', 2)",
    case pgo:query(InsertSql2, []) of
        #{command := insert} ->
            ok;
        {error, Reason3} ->
            erlang:error(Reason3)
    end,

    {ok, 2, Users1} = list_by_user_type_enabled(true, <<"BIG SHOT">>, 10, 0),
    ?LOG_INFO("Users1=~p", [Users1]),
    ok.

-endif.